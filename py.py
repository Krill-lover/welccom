import os
import json
import datetime
import uuid
import asyncio
from typing import Dict, List, Optional
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Router

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
env_path = os.path.join(os.path.dirname(__file__), '.env')
load_dotenv(env_path)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
    exit()

ADMIN_IDS = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '1862652984').split(',') if id.strip()]

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MATERIALS_FILE = "data/materials.json"
STATS_FILE = "data/statistics.json"
MEDIA_DIR = "static/media"
os.makedirs("data", exist_ok=True)
os.makedirs(MEDIA_DIR, exist_ok=True)

# –ü—Ä–µ–¥–º–µ—Ç—ã –∏ –≥—Ä—É–ø–ø—ã
SUBJECTS = {
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", 
    "–∏—Ç": "–ò–¢",
    "–º–¥–∫": "–ú–î–ö 05.01"
}

INFORMATICS_GROUPS = ["11", "12", "13", "14", "15", "16", "17"]

# –¢–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
SUBJECT_TYPES = {
    "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": ["üìö –õ–µ–∫—Ü–∏–∏", "üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã"],
    "–º–¥–∫": ["üìö –õ–µ–∫—Ü–∏–∏", "üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã"]
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
class AddMaterialStates(StatesGroup):
    waiting_subject = State()
    waiting_group = State()
    waiting_type = State()
    waiting_title = State()
    waiting_description = State()
    waiting_file = State()

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class Material:
    def __init__(self, material_id: str, title: str, subject: str, group: str = "", material_type: str = "", description: str = "", 
                 file_path: str = None, date_added: str = None):
        self.id = material_id
        self.title = title
        self.subject = subject
        self.group = group
        self.material_type = material_type
        self.description = description
        self.file_path = file_path
        self.date_added = date_added or datetime.date.today().isoformat()
    
    def to_dict(self):
        return {
            "id": self.id,
            "title": self.title,
            "subject": self.subject,
            "group": self.group,
            "material_type": self.material_type,
            "description": self.description,
            "file_path": self.file_path,
            "date_added": self.date_added
        }
    
    @classmethod
    def from_dict(cls, data):
        return cls(
            material_id=data["id"],
            title=data["title"],
            subject=data["subject"],
            group=data.get("group", ""),
            material_type=data.get("material_type", ""),
            description=data.get("description", ""),
            file_path=data.get("file_path"),
            date_added=data.get("date_added")
        )

# –ú–æ–¥–µ–ª—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
class Statistics:
    def __init__(self):
        self.file_path = STATS_FILE
        self.data = self.load_data()
    
    def load_data(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        default_data = {
            "total_users": 0,
            "active_users": [],
            "daily_stats": {},
            "material_views": {},
            "subject_views": {},
            "user_actions": {}
        }
        try:
            if os.path.exists(self.file_path):
                with open(self.file_path, "r", encoding="utf-8") as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return default_data
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs(os.path.dirname(self.file_path), exist_ok=True)
            with open(self.file_path, "w", encoding="utf-8") as f:
                json.dump(self.data, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
    
    def register_user(self, user_id: int):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today = datetime.date.today().isoformat()
        user_id_str = str(user_id)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if user_id_str not in self.data["active_users"]:
            self.data["active_users"].append(user_id_str)
        
        self.data["total_users"] = len(self.data["active_users"])
        
        # –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if today not in self.data["daily_stats"]:
            self.data["daily_stats"][today] = {
                "new_users": 0,
                "active_users": [],
                "actions": 0
            }
        
        daily = self.data["daily_stats"][today]
        if user_id_str not in daily["active_users"]:
            daily["new_users"] += 1
            daily["active_users"].append(user_id_str)
        
        self.save_data()
    
    def register_action(self, user_id: int, action_type: str, target: str = None):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today = datetime.date.today().isoformat()
        user_id_str = str(user_id)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.register_user(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if today in self.data["daily_stats"]:
            self.data["daily_stats"][today]["actions"] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
        if action_type == "material_view" and target:
            if target not in self.data["material_views"]:
                self.data["material_views"][target] = 0
            self.data["material_views"][target] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        if action_type == "subject_view" and target:
            if target not in self.data["subject_views"]:
                self.data["subject_views"][target] = 0
            self.data["subject_views"][target] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        if user_id_str not in self.data["user_actions"]:
            self.data["user_actions"][user_id_str] = {
                "first_seen": today,
                "last_seen": today,
                "total_actions": 0,
                "action_types": {}
            }
        
        user_stats = self.data["user_actions"][user_id_str]
        user_stats["last_seen"] = today
        user_stats["total_actions"] += 1
        
        if action_type not in user_stats["action_types"]:
            user_stats["action_types"][action_type] = 0
        user_stats["action_types"][action_type] += 1
        
        self.save_data()
    
    def get_daily_stats(self, days: int = 7) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        result = []
        today = datetime.date.today()
        
        for i in range(days):
            date = today - datetime.timedelta(days=i)
            date_str = date.isoformat()
            
            if date_str in self.data["daily_stats"]:
                daily = self.data["daily_stats"][date_str]
                result.append({
                    "date": date_str,
                    "new_users": daily["new_users"],
                    "active_users": len(daily["active_users"]),
                    "actions": daily["actions"]
                })
            else:
                result.append({
                    "date": date_str,
                    "new_users": 0,
                    "active_users": 0,
                    "actions": 0
                })
        
        return result
    
    def get_popular_materials(self, limit: int = 10) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
        materials = sorted(
            self.data["material_views"].items(),
            key=lambda x: x[1],
            reverse=True
        )[:limit]
        return [{"material_id": mat_id, "views": views} for mat_id, views in materials]
    
    def get_popular_subjects(self) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º"""
        return [
            {"subject": subject, "views": views}
            for subject, views in self.data["subject_views"].items()
        ]
    
    def get_active_users_count_today(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.date.today().isoformat()
        if today in self.data["daily_stats"]:
            return len(self.data["daily_stats"][today]["active_users"])
        return 0

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
class DataManager:
    @staticmethod
    def load_json(file_path: str, default=None):
        if default is None:
            default = {}
        try:
            if os.path.exists(file_path):
                with open(file_path, "r", encoding="utf-8") as f:
                    return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        return default
    
    @staticmethod
    def save_json(data, file_path: str):
        try:
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            with open(file_path, "w", encoding="utf-8") as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {file_path}: {e}")
            return False

class MaterialManager:
    def __init__(self):
        self.file_path = MATERIALS_FILE
    
    def get_all_materials(self) -> Dict[str, dict]:
        return DataManager.load_json(self.file_path, {})
    
    def save_materials(self, materials: Dict[str, dict]):
        return DataManager.save_json(materials, self.file_path)
    
    def add_material(self, material: Material) -> bool:
        materials = self.get_all_materials()
        materials[material.id] = material.to_dict()
        return self.save_materials(materials)
    
    def delete_material(self, material_id: str) -> bool:
        materials = self.get_all_materials()
        if material_id in materials:
            if materials[material_id].get("file_path"):
                try:
                    file_path = os.path.join(MEDIA_DIR, materials[material_id]["file_path"])
                    if os.path.exists(file_path):
                        os.remove(file_path)
                        print(f"‚úÖ –§–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            del materials[material_id]
            return self.save_materials(materials)
        return False
    
    def get_material(self, material_id: str) -> Optional[Material]:
        materials = self.get_all_materials()
        material_data = materials.get(material_id)
        return Material.from_dict(material_data) if material_data else None
    
    def get_materials_by_subject(self, subject: str) -> List[Material]:
        materials = self.get_all_materials()
        return [Material.from_dict(mat) for mat in materials.values() 
                if mat.get("subject") == subject]
    
    def get_materials_by_subject_and_group(self, subject: str, group: str) -> List[Material]:
        materials = self.get_all_materials()
        if group == "all":
            return [Material.from_dict(mat) for mat in materials.values() 
                    if mat.get("subject") == subject]
        return [Material.from_dict(mat) for mat in materials.values() 
                if mat.get("subject") == subject and mat.get("group") == group]
    
    def get_materials_by_subject_and_type(self, subject: str, material_type: str) -> List[Material]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏ —Ç–∏–ø—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        materials = self.get_all_materials()
        return [Material.from_dict(mat) for mat in materials.values() 
                if mat.get("subject") == subject and mat.get("material_type") == material_type]
    
    def get_recent_materials(self, limit: int = 10) -> List[Material]:
        materials = self.get_all_materials()
        sorted_materials = sorted(materials.values(), 
                               key=lambda x: x.get("date_added", ""), 
                               reverse=True)
        return [Material.from_dict(mat) for mat in sorted_materials[:limit]]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
material_manager = MaterialManager()
statistics = Statistics()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
class KeyboardManager:
    @staticmethod
    def main_menu(user_id: int) -> InlineKeyboardBuilder:
        builder = InlineKeyboardBuilder()
        builder.button(text="üìö –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="all_materials")
        builder.button(text="üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ", callback_data="recent_materials")
        
        if user_id in ADMIN_IDS:
            builder.button(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        
        builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        builder.adjust(2, 1, 1)
        return builder
    
    @staticmethod
    def admin_panel_keyboard() -> InlineKeyboardBuilder:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="add_material")
        builder.button(text="üóë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏", callback_data="manage_materials")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        return builder
    
    @staticmethod
    def stats_keyboard() -> InlineKeyboardBuilder:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        builder.button(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")
        builder.button(text="üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_stats")
        builder.button(text="üìö –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="popular_materials")
        builder.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        builder.adjust(1)
        return builder
    
    @staticmethod
    def admin_subjects_keyboard() -> InlineKeyboardBuilder:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        builder = InlineKeyboardBuilder()
        for key, subject in SUBJECTS.items():
            builder.button(text=f"üìñ {subject}", callback_data=f"admin_subject:{key}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")
        builder.adjust(2)
        return builder
    
    @staticmethod
    def admin_groups_keyboard(subject: str) -> InlineKeyboardBuilder:
        builder = InlineKeyboardBuilder()
        
        if subject == "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
            for group in INFORMATICS_GROUPS:
                builder.button(text=f"üë• {group}", callback_data=f"admin_group:{group}")
        else:
            builder.button(text="üìö –õ–µ–∫—Ü–∏–∏", callback_data="admin_group:all")
        
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_add_back")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")
        builder.adjust(2)
        return builder
    
    @staticmethod
    def admin_material_types_keyboard(subject: str) -> InlineKeyboardBuilder:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        builder = InlineKeyboardBuilder()
        
        if subject in SUBJECT_TYPES:
            for material_type in SUBJECT_TYPES[subject]:
                builder.button(text=material_type, callback_data=f"admin_material_type:{material_type}")
        else:
            builder.button(text="üìö –õ–µ–∫—Ü–∏–∏", callback_data="admin_material_type:üìö –õ–µ–∫—Ü–∏–∏")
        
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_add_back")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")
        builder.adjust(1)
        return builder
    
    @staticmethod
    def admin_cancel_keyboard() -> InlineKeyboardBuilder:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_add_back")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")
        builder.adjust(2)
        return builder
    
    @staticmethod
    def subjects_keyboard() -> InlineKeyboardBuilder:
        builder = InlineKeyboardBuilder()
        for key, subject in SUBJECTS.items():
            builder.button(text=f"üìñ {subject}", callback_data=f"subject:{key}")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(2)
        return builder
    
    @staticmethod
    def groups_keyboard(subject: str) -> InlineKeyboardBuilder:
        builder = InlineKeyboardBuilder()
        
        if subject == "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
            for group in INFORMATICS_GROUPS:
                builder.button(text=f"üë• {group}", callback_data=f"group:{group}")
        else:
            builder.button(text="üìö –õ–µ–∫—Ü–∏–∏", callback_data="group:all")
        
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subjects")
        builder.adjust(2)
        return builder
    
    @staticmethod
    def material_types_keyboard(subject: str) -> InlineKeyboardBuilder:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ú–î–ö –∏ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        builder = InlineKeyboardBuilder()
        
        if subject in SUBJECT_TYPES:
            for material_type in SUBJECT_TYPES[subject]:
                builder.button(text=material_type, callback_data=f"material_type:{material_type}")
        else:
            builder.button(text="üìö –õ–µ–∫—Ü–∏–∏", callback_data="material_type:üìö –õ–µ–∫—Ü–∏–∏")
        
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subjects")
        builder.adjust(1)
        return builder
    
    @staticmethod
    def materials_list_keyboard(materials: List[Material]) -> InlineKeyboardBuilder:
        builder = InlineKeyboardBuilder()
        
        for material in materials:
            builder.button(text=material.title, callback_data=f"material:{material.id}")
        
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_materials_list")
        builder.adjust(1)
        return builder
    
    @staticmethod
    def material_detail_keyboard(material_id: str, user_id: int) -> InlineKeyboardBuilder:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="back_to_materials")
        
        if user_id in ADMIN_IDS:
            builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_confirm:{material_id}")
        
        builder.adjust(1)
        return builder
    
    @staticmethod
    def manage_materials_keyboard(materials: List[Material]) -> InlineKeyboardBuilder:
        builder = InlineKeyboardBuilder()
        
        for material in materials:
            builder.button(text=f"üóë {material.title}", callback_data=f"delete_material:{material.id}")
        
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        builder.adjust(1)
        return builder

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
class FileManager:
    @staticmethod
    async def save_media_file(message: Message, file_prefix: str) -> Optional[str]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        try:
            if message.document:
                file_ext = os.path.splitext(message.document.file_name)[1]
                file_name = f"{file_prefix}{file_ext}"
                file_path = os.path.join(MEDIA_DIR, file_name)
                await bot.download(message.document, destination=file_path)
                print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                return file_name
            
            elif message.photo:
                file_name = f"{file_prefix}_photo.jpg"
                file_path = os.path.join(MEDIA_DIR, file_name)
                await bot.download(message.photo[-1], destination=file_path)
                print(f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
                return file_name
            
            elif message.video:
                file_name = f"{file_prefix}_video.mp4"
                file_path = os.path.join(MEDIA_DIR, file_name)
                await bot.download(message.video, destination=file_path)
                print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
                return file_name
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None
    
    @staticmethod
    async def send_media_file(chat_id: int, file_path: str, caption: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FSInputFile"""
        try:
            full_path = os.path.join(MEDIA_DIR, file_path)
            
            if not os.path.exists(full_path):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_path}")
                return False
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞: {full_path}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –≤–º–µ—Å—Ç–æ InputFile
            if file_path.lower().endswith(('.jpg', '.jpeg', '.png', '.gif')):
                await bot.send_photo(chat_id, FSInputFile(full_path), caption=caption)
            elif file_path.lower().endswith(('.mp4', '.avi', '.mov', '.mkv')):
                await bot.send_video(chat_id, FSInputFile(full_path), caption=caption)
            else:
                await bot.send_document(chat_id, FSInputFile(full_path), caption=caption)
            
            print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
class MessageUtils:
    @staticmethod
    async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await callback.message.edit_text(text, reply_markup=reply_markup)
            await callback.answer()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=False)
    
    @staticmethod
    async def safe_send_message(chat_id: int, text: str, reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await bot.send_message(chat_id, text, reply_markup=reply_markup)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.message(Command("start"))
async def start(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
    await message.answer_sticker("CAACAgIAAxkBAAEPpXNo_iF5zvoSR-sX4u0G-TxWjbGrlQACzTIAAtyEWEgs4kVS4Lfk0DYE")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    statistics.register_user(message.from_user.id)
    statistics.register_action(message.from_user.id, "start_command")
    
    welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–≥—Ä—É–ø–ø—ã 11-17)
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
‚Ä¢ –ò–¢ (–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)
‚Ä¢ –ú–î–ö 05.01 

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    await message.answer(
        welcome_text,
        reply_markup=KeyboardManager.main_menu(message.from_user.id).as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ "–º–µ–Ω—é", "–ø–æ–º–æ—â—å" –∏ –¥—Ä—É–≥–∏—Ö
@router.message(F.text.lower().in_(["–º–µ–Ω—é", "–Ω–∞—á–∞—Ç—å", "start", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]))
async def text_menu(message: Message):
    statistics.register_action(message.from_user.id, "text_menu")
    
    await message.answer(
        "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=KeyboardManager.main_menu(message.from_user.id).as_markup()
    )

@router.message(F.text.lower().in_(["–ø–æ–º–æ—â—å", "help", "—Å–ø—Ä–∞–≤–∫–∞"]))
async def text_help(message: Message):
    statistics.register_action(message.from_user.id, "text_help")
    
    help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞  
/recent - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞! üéØ
    """
    await message.answer(help_text)

@router.message(F.text.lower().in_(["–∞–¥–º–∏–Ω", "admin", "–∞–¥–º–∏–Ω–∫–∞"]))
async def text_admin(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer_sticker("CAACAgIAAxkBAAEPpYlo_i6hB3X4xhLe2lulwpAta0LBngACMDcAApVPWEiv_tHLqqsS0zYE")
    
    statistics.register_action(message.from_user.id, "text_admin")
    
    await message.answer(
        "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=KeyboardManager.admin_panel_keyboard().as_markup()
    )

@router.message(F.text.lower().in_(["–ø–æ—Å–ª–µ–¥–Ω–∏–µ", "–Ω–æ–≤—ã–µ", "recent"]))
async def text_recent(message: Message):
    statistics.register_action(message.from_user.id, "text_recent")
    
    recent_materials = material_manager.get_recent_materials(5)
    
    if not recent_materials:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        return
    
    text = "üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
    for i, material in enumerate(recent_materials, 1):
        group_info = f" ({material.group})" if material.group and material.group != "all" else ""
        type_info = f" [{material.material_type}]" if material.material_type else ""
        text += f"{i}. {material.title} - {material.subject}{group_info}{type_info}\n"
    
    await message.answer(text)

@router.message(F.text.lower().in_(["–º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–ø—Ä–µ–¥–º–µ—Ç—ã", "–≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã"]))
async def text_materials(message: Message):
    statistics.register_action(message.from_user.id, "text_materials")
    
    await message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=KeyboardManager.subjects_keyboard().as_markup()
    )

@router.message(F.text.lower().in_(["id", "–∞–π–¥–∏", "–º–æ–π id"]))
async def text_id(message: Message):
    user_id = message.from_user.id
    text = f"""
üÜî –í–∞—à–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:

üë§ User ID: {user_id}
–ò–º—è: {message.from_user.first_name}
Username: @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
    """
    await message.answer(text)

@router.message(Command("menu"))
async def menu_command(message: Message):
    statistics.register_action(message.from_user.id, "menu_command")
    
    await message.answer(
        "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=KeyboardManager.main_menu(message.from_user.id).as_markup()
    )

@router.message(Command("help"))
async def help_cmd(message: Message):
    statistics.register_action(message.from_user.id, "help_command")
    
    help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞  
/id - –ü–æ–∫–∞–∑–∞—Ç—å ID
/recent - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞! üéØ
    """
    await message.answer(help_text)

@router.message(Command("id"))
async def get_id(message: Message):
    user_id = message.from_user.id
    text = f"""
üÜî –í–∞—à–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:

üë§ User ID: {user_id}
–ò–º—è: {message.from_user.first_name}
Username: @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
    """
    await message.answer(text)

@router.message(Command("admin"))
async def admin_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞
    await message.answer_sticker("CAACAgIAAxkBAAEPpYlo_i6hB3X4xhLe2lulwpAta0LBngACMDcAApVPWEiv_tHLqqsS0zYE")
    
    statistics.register_action(message.from_user.id, "admin_access")
    
    await message.answer(
        "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=KeyboardManager.admin_panel_keyboard().as_markup()
    )

# –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞ –≤ –∫–æ–ª–±—ç–∫–µ
    await callback.message.answer_sticker("CAACAgIAAxkBAAEPpYlo_i6hB3X4xhLe2lulwpAta0LBngACMDcAApVPWEiv_tHLqqsS0zYE")
    
    statistics.register_action(callback.from_user.id, "admin_panel_access")
    
    await MessageUtils.safe_edit_message(
        callback,
        "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        KeyboardManager.admin_panel_keyboard().as_markup()
    )

# –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¥–ª—è –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    statistics.register_action(callback.from_user.id, "stats_view")
    
    materials = material_manager.get_all_materials()
    total_materials = len(materials)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_users = statistics.data["total_users"]
    active_today = statistics.get_active_users_count_today()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
    subjects_stats = {}
    for material_data in materials.values():
        subject = material_data.get('subject', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if subject not in subjects_stats:
            subjects_stats[subject] = 0
        subjects_stats[subject] += 1
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    weekly_stats = statistics.get_daily_stats(7)
    total_weekly_actions = sum(day["actions"] for day in weekly_stats)
    total_weekly_users = sum(day["active_users"] for day in weekly_stats)
    
    stats_text = "üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    stats_text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n"
    stats_text += f"üìö –í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {total_materials}\n"
    stats_text += f"üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é: {total_weekly_actions} –¥–µ–π—Å—Ç–≤–∏–π\n"
    stats_text += f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {total_weekly_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
    
    stats_text += "üìñ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:\n"
    for subject, count in subjects_stats.items():
        stats_text += f"‚Ä¢ {subject}: {count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
    
    await MessageUtils.safe_edit_message(
        callback,
        stats_text,
        KeyboardManager.stats_keyboard().as_markup()
    )

@router.callback_query(F.data == "detailed_stats")
async def detailed_stats(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    statistics.register_action(callback.from_user.id, "detailed_stats_view")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    weekly_stats = statistics.get_daily_stats(7)
    
    stats_text = "üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 7 –î–ù–ï–ô\n\n"
    
    for day in weekly_stats:
        date_obj = datetime.datetime.strptime(day["date"], "%Y-%m-%d").date()
        if date_obj == datetime.date.today():
            date_str = "–°–µ–≥–æ–¥–Ω—è"
        elif date_obj == datetime.date.today() - datetime.timedelta(days=1):
            date_str = "–í—á–µ—Ä–∞"
        else:
            date_str = date_obj.strftime("%d.%m")
        
        stats_text += f"üìÖ {date_str}:\n"
        stats_text += f"   üë§ –ù–æ–≤—ã–µ: {day['new_users']}\n"
        stats_text += f"   üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {day['active_users']}\n"
        stats_text += f"   üìù –î–µ–π—Å—Ç–≤–∏—è: {day['actions']}\n\n"
    
    await MessageUtils.safe_edit_message(
        callback,
        stats_text,
        KeyboardManager.stats_keyboard().as_markup()
    )

@router.callback_query(F.data == "popular_materials")
async def popular_materials_stats(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    statistics.register_action(callback.from_user.id, "popular_materials_view")
    
    popular_materials = statistics.get_popular_materials(10)
    
    if not popular_materials:
        stats_text = "üìä –ü–û–ü–£–õ–Ø–†–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤."
    else:
        stats_text = "üìä –°–ê–ú–´–ï –ü–û–ü–£–õ–Ø–†–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´\n\n"
        
        for i, mat in enumerate(popular_materials, 1):
            material = material_manager.get_material(mat["material_id"])
            if material:
                stats_text += f"{i}. {material.title}\n"
                stats_text += f"   üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {mat['views']}\n"
                stats_text += f"   üìö –ü—Ä–µ–¥–º–µ—Ç: {material.subject}\n\n"
    
    await MessageUtils.safe_edit_message(
        callback,
        stats_text,
        KeyboardManager.stats_keyboard().as_markup()
    )

@router.callback_query(F.data == "users_stats")
async def users_stats(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    statistics.register_action(callback.from_user.id, "users_stats_view")
    
    user_actions = statistics.data["user_actions"]
    top_users = sorted(
        user_actions.items(),
        key=lambda x: x[1]["total_actions"],
        reverse=True
    )[:10]
    
    stats_text = "üë• –¢–û–ü-10 –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô\n\n"
    
    if not top_users:
        stats_text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        for i, (user_id, data) in enumerate(top_users, 1):
            stats_text += f"{i}. ID: {user_id}\n"
            stats_text += f"   üìù –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {data['total_actions']}\n"
            stats_text += f"   üìÖ –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {data['first_seen']}\n"
            stats_text += f"   üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {data['last_seen']}\n\n"
    
    await MessageUtils.safe_edit_message(
        callback,
        stats_text,
        KeyboardManager.stats_keyboard().as_markup()
    )

# –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data == "add_material")
async def admin_add_material_start(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    statistics.register_action(callback.from_user.id, "add_material_start")
    
    await state.set_state(AddMaterialStates.waiting_subject)
    await MessageUtils.safe_edit_message(
        callback,
        "üìù –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ê–¢–ï–†–ò–ê–õ–ê\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        KeyboardManager.admin_subjects_keyboard().as_markup()
    )

@router.callback_query(AddMaterialStates.waiting_subject, F.data.startswith("admin_subject:"))
async def admin_process_subject(callback: CallbackQuery, state: FSMContext):
    subject_key = callback.data.split(":")[1]
    subject_name = SUBJECTS[subject_key]
    
    statistics.register_action(callback.from_user.id, "subject_selected", subject_name)
    
    await state.update_data(subject_key=subject_key, subject_name=subject_name)
    
    if subject_key == "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
        await state.set_state(AddMaterialStates.waiting_group)
        await MessageUtils.safe_edit_message(
            callback,
            f"üìù {subject_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
            KeyboardManager.admin_groups_keyboard(subject_key).as_markup()
        )
    else:
        await state.set_state(AddMaterialStates.waiting_type)
        await MessageUtils.safe_edit_message(
            callback,
            f"üìù {subject_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
            KeyboardManager.admin_material_types_keyboard(subject_key).as_markup()
        )

@router.callback_query(AddMaterialStates.waiting_group, F.data.startswith("admin_group:"))
async def admin_process_group_callback(callback: CallbackQuery, state: FSMContext):
    group = callback.data.split(":")[1]
    await state.update_data(group=group)
    await state.set_state(AddMaterialStates.waiting_title)
    
    data = await state.get_data()
    subject_name = data['subject_name']
    
    await MessageUtils.safe_edit_message(
        callback,
        f"üìù {subject_name}\n–ì—Ä—É–ø–ø–∞: {group if group != 'all' else '–í—Å–µ'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
        KeyboardManager.admin_cancel_keyboard().as_markup()
    )

@router.callback_query(AddMaterialStates.waiting_type, F.data.startswith("admin_material_type:"))
async def admin_process_material_type_callback(callback: CallbackQuery, state: FSMContext):
    material_type = callback.data.split(":")[1]
    await state.update_data(material_type=material_type, group="all")
    await state.set_state(AddMaterialStates.waiting_title)
    
    data = await state.get_data()
    subject_name = data['subject_name']
    
    material_text = "–ª–µ–∫—Ü–∏–∏" if material_type == "üìö –õ–µ–∫—Ü–∏–∏" else "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã"
    
    await MessageUtils.safe_edit_message(
        callback,
        f"üìù {subject_name}\n–¢–∏–ø: {material_type}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {material_text}:",
        KeyboardManager.admin_cancel_keyboard().as_markup()
    )

@router.message(AddMaterialStates.waiting_title)
async def admin_process_title(message: Message, state: FSMContext):
    if not message.text or len(message.text.strip()) == 0:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    
    await state.update_data(title=message.text.strip())
    await state.set_state(AddMaterialStates.waiting_description)
    
    data = await state.get_data()
    subject_name = data['subject_name']
    group_info = f"–ì—Ä—É–ø–ø–∞: {data.get('group')}" if data.get('group') and data.get('group') != 'all' else ""
    type_info = f"–¢–∏–ø: {data.get('material_type')}" if data.get('material_type') else ""
    
    info_text = f"üìù {subject_name}\n{group_info}\n{type_info}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {message.text.strip()}\n\n"
    
    await message.answer(
        f"{info_text}–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=KeyboardManager.admin_cancel_keyboard().as_markup()
    )

@router.message(AddMaterialStates.waiting_description)
async def admin_process_description(message: Message, state: FSMContext):
    description = message.text if message.text and message.text != "-" else ""
    await state.update_data(description=description)
    await state.set_state(AddMaterialStates.waiting_file)
    
    data = await state.get_data()
    subject_name = data['subject_name']
    group_info = f"–ì—Ä—É–ø–ø–∞: {data.get('group')}" if data.get('group') and data.get('group') != 'all' else ""
    type_info = f"–¢–∏–ø: {data.get('material_type')}" if data.get('material_type') else ""
    
    info_text = f"üìù {subject_name}\n{group_info}\n{type_info}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ—Ç'}\n\n"
    
    await message.answer(
        f"{info_text}üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ):",
        reply_markup=KeyboardManager.admin_cancel_keyboard().as_markup()
    )

@router.message(AddMaterialStates.waiting_file)
async def admin_process_file(message: Message, state: FSMContext):
    data = await state.get_data()
    material_id = str(uuid.uuid4())[:8]
    
    print(f"üîç –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_name = await FileManager.save_media_file(message, material_id)
    
    if not file_name:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
    material = Material(
        material_id=material_id,
        title=data['title'],
        subject=data['subject_name'],
        group=data.get('group', ''),
        material_type=data.get('material_type', ''),
        description=data['description'],
        file_path=file_name
    )
    
    if material_manager.add_material(material):
        group_info = ""
        if material.group and material.group != "all":
            group_info = f" –¥–ª—è –≥—Ä—É–ø–ø—ã {material.group}"
        
        type_info = ""
        if material.material_type:
            type_info = f" ({material.material_type})"
            
        success_text = (
            f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {material.title}\n"
            f"üéØ –ü—Ä–µ–¥–º–µ—Ç: {material.subject}{group_info}{type_info}\n"
            f"üìÑ –§–∞–π–ª: {file_name}\n"
            f"üìÖ –î–∞—Ç–∞: {material.date_added}"
        )
        
        await message.answer(
            success_text,
            reply_markup=KeyboardManager.admin_panel_keyboard().as_markup()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.",
            reply_markup=KeyboardManager.admin_panel_keyboard().as_markup()
        )
    
    await state.clear()

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.callback_query(F.data == "admin_add_back")
async def admin_add_back(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state == AddMaterialStates.waiting_group:
        await state.set_state(AddMaterialStates.waiting_subject)
        await MessageUtils.safe_edit_message(
            callback,
            "üìù –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ê–¢–ï–†–ò–ê–õ–ê\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
            KeyboardManager.admin_subjects_keyboard().as_markup()
        )
    elif current_state == AddMaterialStates.waiting_type:
        await state.set_state(AddMaterialStates.waiting_subject)
        await MessageUtils.safe_edit_message(
            callback,
            "üìù –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ê–¢–ï–†–ò–ê–õ–ê\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
            KeyboardManager.admin_subjects_keyboard().as_markup()
        )
    elif current_state == AddMaterialStates.waiting_title:
        data = await state.get_data()
        subject_key = data.get('subject_key')
        
        if subject_key == "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
            await state.set_state(AddMaterialStates.waiting_group)
            await MessageUtils.safe_edit_message(
                callback,
                f"üìù {data['subject_name']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø–∞:",
                KeyboardManager.admin_groups_keyboard(subject_key).as_markup()
            )
        else:
            await state.set_state(AddMaterialStates.waiting_type)
            await MessageUtils.safe_edit_message(
                callback,
                f"üìù {data['subject_name']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
                KeyboardManager.admin_material_types_keyboard(subject_key).as_markup()
            )
    else:
        await state.clear()
        await admin_panel_callback(callback)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ (–∞–¥–º–∏–Ω)
@router.callback_query(F.data == "manage_materials")
async def manage_materials_handler(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    materials = material_manager.get_recent_materials(20)
    
    if not materials:
        await MessageUtils.safe_edit_message(
            callback,
            "üì≠ –ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            KeyboardManager.admin_panel_keyboard().as_markup()
        )
        return
    
    text = "üóë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    await MessageUtils.safe_edit_message(
        callback,
        text,
        KeyboardManager.manage_materials_keyboard(materials).as_markup()
    )

@router.callback_query(F.data.startswith("delete_material:"))
async def delete_material_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    material_id = callback.data.split(":")[1]
    material = material_manager.get_material(material_id)
    
    if not material:
        await callback.answer("‚ö†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if material_manager.delete_material(material_id):
        await MessageUtils.safe_edit_message(
            callback,
            f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª '{material.title}' —É–¥–∞–ª–µ–Ω!",
            KeyboardManager.admin_panel_keyboard().as_markup()
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

@router.callback_query(F.data.startswith("delete_confirm:"))
async def delete_confirm_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    material_id = callback.data.split(":")[1]
    material = material_manager.get_material(material_id)
    
    if not material:
        await callback.answer("‚ö†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_material:{material_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"material:{material_id}")
    builder.adjust(2)
    
    await MessageUtils.safe_edit_message(
        callback,
        f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª:\n{material.title}?",
        builder.as_markup()
    )

# –ù–ê–í–ò–ì–ê–¶–ò–Ø –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    statistics.register_action(callback.from_user.id, "main_menu")
    
    await MessageUtils.safe_edit_message(
        callback,
        "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        KeyboardManager.main_menu(callback.from_user.id).as_markup()
    )

@router.callback_query(F.data == "all_materials")
async def all_materials_callback(callback: CallbackQuery):
    statistics.register_action(callback.from_user.id, "all_materials_view")
    
    await MessageUtils.safe_edit_message(
        callback,
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        KeyboardManager.subjects_keyboard().as_markup()
    )

@router.callback_query(F.data == "back_to_subjects")
async def back_to_subjects(callback: CallbackQuery):
    await all_materials_callback(callback)

@router.callback_query(F.data.startswith("subject:"))
async def subject_materials_callback(callback: CallbackQuery):
    subject_key = callback.data.split(":")[1]
    subject_name = SUBJECTS.get(subject_key, subject_key)
    
    statistics.register_action(callback.from_user.id, "subject_view", subject_name)
    
    if subject_key == "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
        text = f"üìñ {subject_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
        await MessageUtils.safe_edit_message(
            callback,
            text,
            KeyboardManager.groups_keyboard(subject_key).as_markup()
        )
    else:
        text = f"üìñ {subject_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:"
        await MessageUtils.safe_edit_message(
            callback,
            text,
            KeyboardManager.material_types_keyboard(subject_key).as_markup()
        )

@router.callback_query(F.data.startswith("group:"))
async def group_materials_callback(callback: CallbackQuery):
    group = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    subject_line = callback.message.text.split('\n')[0]
    subject_key = next((key for key, name in SUBJECTS.items() if name in subject_line), None)
    
    if not subject_key:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    subject_name = SUBJECTS[subject_key]
    materials = material_manager.get_materials_by_subject_and_group(subject_name, group)
    
    if not materials:
        group_text = f"–≥—Ä—É–ø–ø—ã {group}" if group != "all" else "–ª–µ–∫—Ü–∏–π"
        await MessageUtils.safe_edit_message(
            callback,
            f"üì≠ –ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name} –¥–ª—è {group_text}.",
            KeyboardManager.groups_keyboard(subject_key).as_markup()
        )
        return
    
    group_text = f"–¥–ª—è –≥—Ä—É–ø–ø—ã {group}" if group != "all" else "–ª–µ–∫—Ü–∏–∏"
    
    await MessageUtils.safe_edit_message(
        callback,
        f"üìñ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ {subject_name} {group_text}:",
        KeyboardManager.materials_list_keyboard(materials).as_markup()
    )

@router.callback_query(F.data.startswith("material_type:"))
async def material_type_callback(callback: CallbackQuery):
    material_type = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    subject_line = callback.message.text.split('\n')[0]
    subject_key = next((key for key, name in SUBJECTS.items() if name in subject_line), None)
    
    if not subject_key:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    subject_name = SUBJECTS[subject_key]
    materials = material_manager.get_materials_by_subject_and_type(subject_name, material_type)
    
    if not materials:
        type_text = "–ª–µ–∫—Ü–∏–π" if material_type == "üìö –õ–µ–∫—Ü–∏–∏" else "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç"
        await MessageUtils.safe_edit_message(
            callback,
            f"üì≠ –ù–µ—Ç {type_text} –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name}.",
            KeyboardManager.material_types_keyboard(subject_key).as_markup()
        )
        return
    
    await MessageUtils.safe_edit_message(
        callback,
        f"üìñ {material_type} –ø–æ {subject_name}:",
        KeyboardManager.materials_list_keyboard(materials).as_markup()
    )

@router.callback_query(F.data == "back_to_materials_list")
async def back_to_materials_list(callback: CallbackQuery):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç...")
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    await all_materials_callback(callback)

@router.callback_query(F.data == "back_to_materials")
async def back_to_materials(callback: CallbackQuery):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞/–≥—Ä—É–ø–ø—ã
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º...")
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = callback.message.text
    if "–≥—Ä—É–ø–ø—ã" in text:
        # –ï—Å–ª–∏ –±—ã–ª–∏ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≥—Ä—É–ø–ø—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥—Ä—É–ø–ø–∞–º
        subject_line = text.split('\n')[0]
        subject_key = next((key for key, name in SUBJECTS.items() if name in subject_line), None)
        if subject_key:
            await subject_materials_callback(callback)
    else:
        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        await all_materials_callback(callback)

@router.callback_query(F.data.startswith("material:"))
async def material_detail_callback(callback: CallbackQuery):
    material_id = callback.data.split(":")[1]
    material = material_manager.get_material(material_id)
    
    if not material:
        await callback.answer("‚ö†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    statistics.register_action(callback.from_user.id, "material_view", material_id)
    
    group_info = f"\n–ì—Ä—É–ø–ø–∞: {material.group}" if material.group and material.group != "all" else ""
    type_info = f"\n–¢–∏–ø: {material.material_type}" if material.material_type else ""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    views = statistics.data["material_views"].get(material_id, 0)
    
    text = f"""
üìö {material.title}

–ü—Ä–µ–¥–º–µ—Ç: {material.subject}{group_info}{type_info}
–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {material.date_added}
üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views}

{material.description or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}
    """
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await MessageUtils.safe_edit_message(
        callback,
        text,
        KeyboardManager.material_detail_keyboard(
            material_id, callback.from_user.id
        ).as_markup()
    )
    
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if material.file_path:
        print(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material.file_path}")
        success = await FileManager.send_media_file(
            callback.from_user.id, 
            material.file_path,
            f"üìé –§–∞–π–ª –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É: {material.title}"
        )
        if not success:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@router.message(Command("recent"))
@router.callback_query(F.data == "recent_materials")
async def recent_materials_handler(update: Message | CallbackQuery):
    if isinstance(update, CallbackQuery):
        user_id = update.from_user.id
        message = update.message
        statistics.register_action(user_id, "recent_materials_view")
    else:
        user_id = update.from_user.id
        message = update
        statistics.register_action(user_id, "recent_command")
    
    recent_materials = material_manager.get_recent_materials(5)
    
    if not recent_materials:
        text = "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."
        if isinstance(update, CallbackQuery):
            await MessageUtils.safe_edit_message(update, text)
        else:
            await update.answer(text)
        return
    
    text = "üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
    for i, material in enumerate(recent_materials, 1):
        group_info = f" ({material.group})" if material.group and material.group != "all" else ""
        type_info = f" [{material.material_type}]" if material.material_type else ""
        text += f"{i}. {material.title} - {material.subject}{group_info}{type_info}\n"
    
    if isinstance(update, CallbackQuery):
        await MessageUtils.safe_edit_message(
            update,
            text,
            KeyboardManager.main_menu(update.from_user.id).as_markup()
        )
    else:
        await update.answer(text)

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
@router.callback_query(F.data == "cancel")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await MessageUtils.safe_edit_message(
        callback,
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        KeyboardManager.main_menu(callback.from_user.id).as_markup()
    )

@router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    statistics.register_action(callback.from_user.id, "help_callback")
    
    help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞  
/id - –ü–æ–∫–∞–∑–∞—Ç—å ID
/recent - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞! üéØ
    """
    await MessageUtils.safe_edit_message(
        callback,
        help_text,
        KeyboardManager.main_menu(callback.from_user.id).as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def unknown_message(message: Message):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç (–Ω–µ –∫–æ–º–∞–Ω–¥–∞), –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é
    if message.text and not message.text.startswith('/'):
        await message.answer(
            "ü§î –ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "‚Ä¢ '–º–µ–Ω—é' - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ '–ø–æ–º–æ—â—å' - –°–ø—Ä–∞–≤–∫–∞\n" 
            "‚Ä¢ '–º–∞—Ç–µ—Ä–∏–∞–ª—ã' - –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
            "‚Ä¢ '–ø–æ—Å–ª–µ–¥–Ω–∏–µ' - –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
            "‚Ä¢ 'id' - –ú–æ–π ID",
            reply_markup=KeyboardManager.main_menu(message.from_user.id).as_markup()
        )
    else:
        await message.answer(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ /help",
            reply_markup=KeyboardManager.main_menu(message.from_user.id).as_markup()
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print(f"üìÅ –ú–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.path.abspath(MEDIA_DIR)}")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {statistics.data['total_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_IDS}")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        statistics.save_data()

if __name__ == "__main__":
    asyncio.run(main())